<?php

namespace Tests\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Tests\PlatformBundle\Entity\Advert;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Récupère toutes les annonces par date la plus recente
     * @return Array of Advert (Object)
     */
    public function getAdverts($sets = null)
    {
        $qb = $this->createQueryBuilder('advert')
            ->orderBy('advert.date', 'DESC');

        if (empty($sets)) {
            $qb->leftJoin('advert.applications', 'app')
                    ->addSelect('app')
                    ->leftJoin('advert.image', 'img')
                    ->addSelect('img')
                    ->leftJoin('advert.categories', 'cat')
                    ->addSelect('cat')
                    ->leftJoin('advert.skills', 'skill')
                    ->addSelect('skill');
        } else {
            if (!empty($sets['__embedded']['applications'])) {
                $qb->leftJoin('advert.applications', 'app')
                    ->addSelect('app');
            }

            if (!empty($sets['__embedded']['skills'])) {
                $qb->leftJoin('advert.skills', 'skill')
                    ->addSelect('skill');
            }

            if (!empty($sets['__embedded']['image'])) {
                $qb->leftJoin('advert.image', 'img')
                    ->addSelect('img');
            }

            if (!empty($sets['__embedded']['categories'])) {
                $qb->leftJoin('advert.categories', 'cat')
                    ->addSelect('cat');
            }
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupère toutes les annonces
     * @return Array of Advert (Array)
     */
    public function getArrayAdverts($sets = null)
    {
        $qb = $this->createQueryBuilder('advert')
        ->orderBy('advert.date', 'DESC');

        if (empty($sets)) {
            $qb->leftJoin('advert.applications', 'app')
            ->addSelect('app')
            ->leftJoin('advert.image', 'img')
            ->addSelect('img')
            ->leftJoin('advert.categories', 'cat')
            ->addSelect('cat')
            ->leftJoin('advert.skills', 'skill')
            ->addSelect('skill');
        } else {
            if (!empty($sets['__embedded']['applications'])) {
                $qb->leftJoin('advert.applications', 'app')
                ->addSelect('app');
            }

            if (!empty($sets['__embedded']['skills'])) {
                $qb->leftJoin('advert.skills', 'skill')
                ->addSelect('skill');
            }

            if (!empty($sets['__embedded']['image'])) {
                $qb->leftJoin('advert.image', 'img')
                ->addSelect('img');
            }

            if (!empty($sets['__embedded']['categories'])) {
                $qb->leftJoin('advert.categories', 'cat')
                ->addSelect('cat');
            }
        }

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Retourne le nombre d'Advert qu'il y a en BDD
     * @return mixed|\Doctrine\DBAL\Driver\Statement|NULL
     */
    public function getNbAdverts()
    {
        $qb = $this->createQueryBuilder('advert')->select('count(advert)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Retourne l'ensemble des annonces (Advert) qui sont dans l'une des catégories de $categoryNames
     * @param array $categoryNames
     * @return array Advert (Object)
     */
    public function getAdvertWithCategories(array $categoryNames)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->innerJoin('a.categories', 'cat')
            ->addSelect('cat');

        $queryBuilder->where($queryBuilder->expr()->in('c.name', $categoryNames));

        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function myFindAll()
    {

        // le 'advert' peut être remplacé par n'importe quelle autre chaine de caractères, c'est juste un alias
        // déjà, il est conseillé de mettre 'a' au lieu de 'advert', première lettre de l'entity
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('advert')
            ->from($this->_entityName, 'advert');

        // on peut aussi construire le queryBuilder comme ceci
        // $queryBuilder = $this->createQueryBuilder('advert');

        // on récupère la requete
        $query = $queryBuilder->getQuery();

        // On execute la requete pour recuperer le resultat
        $result = $query->getResult();
        // Ou bien
        //$result = $query->execute(null, $query::HYDRATE_OBJECT);

        return $result;

        // En very short requete :)
        // return $this->createQueryBuilder('advert')->getQuery()->getResult();
    }

    public function myFindOne($id)
    {
        $queryBuilder = $this->createQueryBuilder('advert');
        $queryBuilder->where('advert.id = :id')
        ->setParameter('id', (int) $id);

        return $queryBuilder->getQuery()->getResult();
    }

    public function myFindDQL($id)
    {
        $query = $this->_em->createQuery("SELECT a FROM TestsPlatfromBundle:Advert a WHERE id = :id");
        $query->setParameter('id', (int) $id);
        return $query->getSingleResult();
    }

    public function findByAuthorAndDate($author, $date)
    {
        $queryBuilder = $this->createQueryBuilder('a')
                        ->where('a.author = :author')
                        ->andWhere('a.date < :year');

        $queryBuilder->setParameter('author', $author);
        $queryBuilder->setParameter('date', $date);

        $queryBuilder->orderBy('a.date', 'DESC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')
        ->setParameter('start', new \DateTime(date('Y').'-01-01'))
        ->setParameter('end', new \DateTime(date('Y').'-12-31'));
    }

    public function myFind($author)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.author = :author')->setParameter('author', $author);
        $this->whereCurrentYear($queryBuilder);
        $queryBuilder->orderBy('a.date', 'DESC');
        return $queryBuilder->getQuery()->getResult();
    }
}
