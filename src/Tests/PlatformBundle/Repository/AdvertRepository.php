<?php

namespace Tests\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAdvertWithApplications()
    {
        $queryBuilder = $this->createQueryBuilder('a')
                        ->leftJoin('a.applications', 'app')
                        ->addSelect('app');
        
        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->innerJoin('a.categories', 'cat')
            ->addSelect('cat');

        $queryBuilder->where($queryBuilder->expr()->in('c.name', $categoryNames));

        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function myFindAll()
    {

        // le 'advert' peut être remplacé par n'importe quelle autre chaine de caractères, c'est juste un alias
        // déjà, il est conseillé de mettre 'a' au lieu de 'advert', première lettre de l'entity
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('advert')
            ->from($this->_entityName, 'advert');

        // on peut aussi construire le queryBuilder comme ceci
        // $queryBuilder = $this->createQueryBuilder('advert');

        // on récupère la requete
        $query = $queryBuilder->getQuery();

        // On execute la requete pour recuperer le resultat
        $result = $query->getResult();
        // Ou bien
        //$result = $query->execute(null, $query::HYDRATE_OBJECT);

        return $result;

        // En very short requete :)
        // return $this->createQueryBuilder('advert')->getQuery()->getResult();
    }

    public function myFindOne($id)
    {
        $queryBuilder = $this->createQueryBuilder('advert');
        $queryBuilder->where('advert.id = :id')
        ->setParameter('id', (int) $id);

        return $queryBuilder->getQuery()->getResult();
    }

    public function myFindDQL($id)
    {
        $query = $this->_em->createQuery("SELECT a FROM TestsPlatfromBundle:Advert a WHERE id = :id");
        $query->setParameter('id', (int) $id);
        return $query->getSingleResult();
    }

    public function findByAuthorAndDate($author, $date)
    {
        $queryBuilder = $this->createQueryBuilder('a')
                        ->where('a.author = :author')
                        ->andWhere('a.date < :year');

        $queryBuilder->setParameter('author', $author);
        $queryBuilder->setParameter('date', $date);

        $queryBuilder->orderBy('a.date', 'DESC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')
        ->setParameter('start', new \DateTime(date('Y').'-01-01'))
        ->setParameter('end', new \DateTime(date('Y').'-12-31'));
    }

    public function myFind($author)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.author = :author')->setParameter('author', $author);
        $this->whereCurrentYear($queryBuilder);
        $queryBuilder->orderBy('a.date', 'DESC');
        return $queryBuilder->getQuery()->getResult();
    }
}
